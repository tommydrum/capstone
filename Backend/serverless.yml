service: backend
frameworkVersion: '3'

provider:
  name: aws
  runtime: java21
  region: ap-northeast-3
  stage: dev
  cognitoUserPoolsAuthorizer: 
    capstoneUPA: 
      arn: arn:aws:cognito-idp:ap-northeast-3:149636912987:userpool/ap-northeast-3_8c1C7AphA
  vpc:
    securityGroupIds:
      - sg-08769d4f9dacc90c5
    subnetIds:
      - subnet-0f9893841e884ecb5
  timeout: 30
  # you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "secretsmanager:GetSecretValue"
            - "secretsmanager:DescribeSecret"
          Resource: "arn:aws:secretsmanager:ap-northeast-3:149636912987:secret:db-dWfHYO"
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - rds-db:connect
#          Resource: 'arn:aws:rds-db:us-west-2:149636912987:dbuser:capstone/*'
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

package:
  artifact: target/Capstone-dev.jar

functions:
  getParts:
    handler: me.t8d.capstonebackend.rest.parts.GetParts::handleRequest
    events:
      - http:
          path: /parts
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:ap-northeast-3:149636912987:userpool/ap-northeast-3_8c1C7AphA
  getPartByID:
    handler: me.t8d.capstonebackend.rest.parts.GetPartByID::handleRequest
    events:
      - http:
          path: /parts/{id}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:ap-northeast-3:149636912987:userpool/ap-northeast-3_8c1C7AphA
  getPartsByName:
    handler: me.t8d.capstonebackend.rest.parts.GetPartsByName::handleRequest
    events:
      - http:
          path: /parts/byName/{name}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:ap-northeast-3:149636912987:userpool/ap-northeast-3_8c1C7AphA
  addPart:
    handler: me.t8d.capstonebackend.rest.parts.AddPart::handleRequest
    events:
      - http:
          path: /parts
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:ap-northeast-3:149636912987:userpool/ap-northeast-3_8c1C7AphA
  deletePart:
    handler: me.t8d.capstonebackend.rest.parts.DeletePart::handleRequest
    events:
      - http:
          path: /parts/{id}
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:ap-northeast-3:149636912987:userpool/ap-northeast-3_8c1C7AphA
  updatePart:
    handler: me.t8d.capstonebackend.rest.parts.UpdatePart::handleRequest
    events:
      - http:
          path: /parts/{id}
          method: put
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:ap-northeast-3:149636912987:userpool/ap-northeast-3_8c1C7AphA
  getProducts:
    handler: me.t8d.capstonebackend.rest.products.GetProducts::handleRequest
    events:
      - http:
          path: /products
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:ap-northeast-3:149636912987:userpool/ap-northeast-3_8c1C7AphA
  getProductByID:
    handler: me.t8d.capstonebackend.rest.products.GetProductByID::handleRequest
    events:
      - http:
          path: /products/{id}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:ap-northeast-3:149636912987:userpool/ap-northeast-3_8c1C7AphA
  getProductsByName:
    handler: me.t8d.capstonebackend.rest.products.GetProductsByName::handleRequest
    events:
      - http:
          path: /products/byName/{name}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:ap-northeast-3:149636912987:userpool/ap-northeast-3_8c1C7AphA
  addProduct:
    handler: me.t8d.capstonebackend.rest.products.AddProduct::handleRequest
    events:
      - http:
          path: /products
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:ap-northeast-3:149636912987:userpool/ap-northeast-3_8c1C7AphA
  deleteProduct:
    handler: me.t8d.capstonebackend.rest.products.DeleteProduct::handleRequest
    events:
      - http:
          path: /products/{id}
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:ap-northeast-3:149636912987:userpool/ap-northeast-3_8c1C7AphA
  updateProduct:
    handler: me.t8d.capstonebackend.rest.products.UpdateProduct::handleRequest
    events:
      - http:
          path: /products/{id}
          method: put
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:ap-northeast-3:149636912987:userpool/ap-northeast-3_8c1C7AphA
  ping:
    handler: me.t8d.capstonebackend.PingHandler::handleRequest
    events:
      - http:
          path: /ping
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:ap-northeast-3:149636912987:userpool/ap-northeast-3_8c1C7AphA
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
